<?xml version="1.0" encoding="UTF-8"?>
<!--필요한 엘리먼트들을 사용하기 위한 namespace 추가하는 부분
xmlns:키워드 => 키워드로 엘리먼트를 생성한다.
xsi:schemaLocation에서 namespace를 사용하기 위한 설정 파일인 xsd 파일을 링크를 걸어줘야 namespace를 사용할 수 있다.-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--ContextLoaderListener 객체에서 사용하는 설정파일
        web.xml을 읽으면서 제일 먼저 불러오는 설정파일이다.
        프로젝트에서 전반적으로 사용되는 자원(DB커넥션, 트랜잭션처리, 파일업로드 등)을 생성하고 설정.
        bean 엘리먼트로 객체를 생성해서 스프링 컨테이너에 등록할 수 있는 설정도 할 수 있다.
    -->
    <!--Spring Annotation 활성화-->
    <mvc:annotation-driven/>
    
    <!--정적 리소스에 대한 접근 허용
        기본적으로 Spring에서는 정적 리소스에 대한 접근을 막고 있기 때문에 이 설정을 통해
        html, js, css, 이미지 파일 등 정적 파일에 대한 접근을 풀어줄 수 있다.
        web 서버에서 기본적으로 rootpath가 webapp 폴더로 잡혀있다.-->
    <mvc:resources mapping="/resources/**" location="/resources"></mvc:resources>
</beans>