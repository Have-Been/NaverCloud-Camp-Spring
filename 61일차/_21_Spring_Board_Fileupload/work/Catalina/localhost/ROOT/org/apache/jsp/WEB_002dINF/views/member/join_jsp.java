/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.25
 * Generated at: 2024-07-22 08:12:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div>\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}/header.jsp", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <main>\r\n");
      out.write("            <div class=\"container mt-5 w-25\">\r\n");
      out.write("                <h4>회원가입</h4>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"container mt-3 mb-5 w-25\">\r\n");
      out.write("                <form id=\"join-form\" action=\"/member/join.do\" method=\"post\">\r\n");
      out.write("                    <div class=\"form-group\">\r\n");
      out.write("                        <label for=\"username\">아이디</label>\r\n");
      out.write("                        <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" required>\r\n");
      out.write("                        <div class=\"d-flex justify-content-end mt-2\">\r\n");
      out.write("                            <button type=\"button\" class=\"btn btn-secondary\" id=\"btn-id-check\">중복체크</button>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group mt-3\">\r\n");
      out.write("                        <label for=\"password\">비밀번호</label>\r\n");
      out.write("                        <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" required>\r\n");
      out.write("                        <p id=\"password-check\" style=\"color: red; font-size: 0.8rem;\">\r\n");
      out.write("                            비밀번호는 영문자, 숫자, 특수문자 조합의 9자리 이상으로 설정해주세요.\r\n");
      out.write("                        </p>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group mt-3\">\r\n");
      out.write("                        <label for=\"password-confirm\">비밀번호 확인</label>\r\n");
      out.write("                        <input type=\"password\" class=\"form-control\" id=\"password-confirm\" name=\"password-confirm\" required>\r\n");
      out.write("                        <p id=\"password-confirm-result\" style=\"font-size: 0.8rem;\"></p>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group mt-3\">\r\n");
      out.write("                        <label for=\"nickname\">닉네임</label>\r\n");
      out.write("                        <input type=\"text\" class=\"form-control\" id=\"nickname\" name=\"nickname\" required>\r\n");
      out.write("                        <div class=\"d-flex justify-content-end mt-2\">\r\n");
      out.write("                            <button type=\"button\" class=\"btn btn-secondary\" id=\"btn-nickname-check\">중복체크</button>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group mt-3\">\r\n");
      out.write("                        <label for=\"email\">이메일</label>\r\n");
      out.write("                        <input type=\"text\" class=\"form-control\" id=\"email\" name=\"email\" required>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group mt-3\">\r\n");
      out.write("                        <label for=\"tel\">휴대폰</label>\r\n");
      out.write("                        <input type=\"text\" class=\"form-control\" id=\"tel\" name=\"tel\" placeholder=\"숫자만 입력하세요.\">\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group mt-3\">\r\n");
      out.write("                        <button type=\"submit\" class=\"btn btn-outline-secondary w-100\">회원가입</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </main>\r\n");
      out.write("\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, (java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}/footer.jsp", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null), out, false);
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        $(() => {\r\n");
      out.write("            // 아이디 중복체크 여부\r\n");
      out.write("            let idCheck = false;\r\n");
      out.write("            // 닉네임 중복체크 여부\r\n");
      out.write("            let nicknameCheck = false;\r\n");
      out.write("            // 비밀번호 유효성 검사 여부\r\n");
      out.write("            let passwordCheck = false;\r\n");
      out.write("            // 비밀번호 일치 여부\r\n");
      out.write("            let passwordConfirm = false;\r\n");
      out.write("\r\n");
      out.write("            // ajax를 통한 아이디 중복체크\r\n");
      out.write("            $(\"#btn-id-check\").on(\"click\", (e) => {\r\n");
      out.write("                console.log($(\"#join-form\").serialize());\r\n");
      out.write("                // 중복체크 버튼 클릭 시 아이디값이 비어 있으면\r\n");
      out.write("                if($(\"#username\").val() === \"\") {\r\n");
      out.write("                    alert(\"아이디를 입력하세요.\");\r\n");
      out.write("                    $(\"#username\").focus();\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                // ajax를 이용해서 백엔드와 비동기 통신\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    url: \"/member/usernameCheck.do\",\r\n");
      out.write("                    type: \"post\",\r\n");
      out.write("                    contentType: \"x-www-form-urlencoded\",\r\n");
      out.write("                    data: $(\"#join-form\").serialize(),\r\n");
      out.write("                    success: (obj) => {\r\n");
      out.write("\r\n");
      out.write("                        // Json String을 Json Object로 변경\r\n");
      out.write("                        const jsonObj = JSON.parse(obj);\r\n");
      out.write("\r\n");
      out.write("                        console.log(obj);\r\n");
      out.write("                        console.log(jsonObj);\r\n");
      out.write("\r\n");
      out.write("                        if(jsonObj.usernameCheckMsg === 'usernameOk') {\r\n");
      out.write("                            if(confirm(`사용가능한 아이디입니다. ${$(\"#username\").val()}를 사용하시겠습니까?`)) {\r\n");
      out.write("                                idCheck = true;\r\n");
      out.write("                                $(\"#btn-id-check\").attr(\"disabled\", true);\r\n");
      out.write("                            }\r\n");
      out.write("                            return;\r\n");
      out.write("                        }\r\n");
      out.write("\r\n");
      out.write("                        alert(\"중복된 아이디입니다.\");\r\n");
      out.write("                        idCheck = false;\r\n");
      out.write("                        $(\"#username\").focus();\r\n");
      out.write("                        // if(obj === 'usernameOk') {\r\n");
      out.write("                        //     alert(\"사용가능한 아이디입니다.\");\r\n");
      out.write("                        // } else {\r\n");
      out.write("                        //     alert(\"중복된 아이디입니다.\");\r\n");
      out.write("                        // }\r\n");
      out.write("                    },\r\n");
      out.write("                    error: (err) => {\r\n");
      out.write("                        console.log(err);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // 중복체크 후에 아이디 값이 변경되면 다시 중복체크 버튼을 활성화\r\n");
      out.write("            $(\"#username\").on(\"change\", (e) => {\r\n");
      out.write("                idCheck = false;\r\n");
      out.write("                $(\"#btn-id-check\").attr(\"disabled\", false);\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            $(\"#btn-nickname-check\").on(\"click\", (e) => {\r\n");
      out.write("               if($(\"#nickname\").val() === '') {\r\n");
      out.write("                   alert(\"닉네임을 입력하세요.\");\r\n");
      out.write("                   $(\"#nickname\").focus();\r\n");
      out.write("                   return;\r\n");
      out.write("               }\r\n");
      out.write("\r\n");
      out.write("               $.ajax({\r\n");
      out.write("                   url: \"/member/nicknameCheck.do\",\r\n");
      out.write("                   type: \"post\",\r\n");
      out.write("                   data: $(\"#join-form\").serialize(),\r\n");
      out.write("                   success: (obj) => {\r\n");
      out.write("                       const jsonObj = JSON.parse(obj);\r\n");
      out.write("\r\n");
      out.write("                       if(jsonObj.nicknameCheckMsg === \"nicknameOk\") {\r\n");
      out.write("                           if(confirm(`사용가능한 닉네임입니다. ${$(\"#nickname\").val()}을 사용하시겠습니까?`)) {\r\n");
      out.write("                               nicknameCheck = true;\r\n");
      out.write("                               $(\"#btn-nickname-check\").attr(\"disabled\", true);\r\n");
      out.write("                           }\r\n");
      out.write("                           return;\r\n");
      out.write("                       }\r\n");
      out.write("\r\n");
      out.write("                       alert(\"중복된 닉네임입니다.\");\r\n");
      out.write("                       nicknameCheck = false;\r\n");
      out.write("                   },\r\n");
      out.write("                   error: (err) => {\r\n");
      out.write("                       console.log(err);\r\n");
      out.write("                   }\r\n");
      out.write("               });\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            $(\"#nickname\").on(\"change\", (e) => {\r\n");
      out.write("                nicknameCheck = false;\r\n");
      out.write("                $(\"#btn-nickname-check\").attr(\"disabled\", false);\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // 비밀번호 유효성 검사 메소드\r\n");
      out.write("            const validatePassword = (pw) => {\r\n");
      out.write("                return /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*+=-]).{9,}$/.test(pw);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            // 비밀번호 input의 내용이 변경되면 validatePassword 메소드로 유효성 검사 진행\r\n");
      out.write("            $(\"#password\").on(\"change\", (e) => {\r\n");
      out.write("                console.log(validatePassword($(\"#password\").val()));\r\n");
      out.write("               if(validatePassword($(\"#password\").val())) {\r\n");
      out.write("                   passwordCheck = true;\r\n");
      out.write("                   $(\"#password-check\").hide();\r\n");
      out.write("               } else {\r\n");
      out.write("                   passwordCheck = false;\r\n");
      out.write("                   $(\"#password-check\").show();\r\n");
      out.write("               }\r\n");
      out.write("\r\n");
      out.write("                if($(\"#password\").val() === $(\"#password-confirm\").val()) {\r\n");
      out.write("                    passwordConfirm = true;\r\n");
      out.write("                    $(\"#password-confirm-result\").text(\"비밀번호가 일치합니다.\");\r\n");
      out.write("                    $(\"#password-confirm-result\").css(\"color\", \"green\");\r\n");
      out.write("                } else {\r\n");
      out.write("                    passwordConfirm = false;\r\n");
      out.write("                    $(\"#password-confirm-result\").text(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("                    $(\"#password-confirm-result\").css(\"color\", \"red\");\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // 비밀번호 확인\r\n");
      out.write("            $(\"#password-confirm\").on(\"change\", (e) => {\r\n");
      out.write("                $(\"#password-confirm-result\").show();\r\n");
      out.write("\r\n");
      out.write("                if($(\"#password\").val() === $(\"#password-confirm\").val()) {\r\n");
      out.write("                    passwordConfirm = true;\r\n");
      out.write("                    $(\"#password-confirm-result\").text(\"비밀번호가 일치합니다.\");\r\n");
      out.write("                    $(\"#password-confirm-result\").css(\"color\", \"green\");\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                passwordConfirm = false;\r\n");
      out.write("                $(\"#password-confirm-result\").text(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("                $(\"#password-confirm-result\").css(\"color\", \"red\");\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            $(\"#join-form\").on(\"submit\", (e) => {\r\n");
      out.write("                // id 중복체크가 되지 않았을 때\r\n");
      out.write("                if(!idCheck) {\r\n");
      out.write("                    e.preventDefault();\r\n");
      out.write("                    alert(\"아이디 중복체크를 진행하세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                if(!passwordCheck) {\r\n");
      out.write("                    e.preventDefault();\r\n");
      out.write("                    alert(\"비밀번호는 영문자, 숫자, 특수문자 조합의 9자리 이상으로 지정하세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                if(!passwordConfirm) {\r\n");
      out.write("                    e.preventDefault();\r\n");
      out.write("                    alert(\"비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                if(!nicknameCheck) {\r\n");
      out.write("                    e.preventDefault();\r\n");
      out.write("                    alert(\"닉네임 중복체크를 진행하세요.\");\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
